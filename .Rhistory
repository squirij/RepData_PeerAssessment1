plot(WaitTime)
?plot
plot()
plot(time)
plot(waittime)
Plot(WaitTime)
plot(WaitTime)
plot('WaitTime')
plot(fit1)
data1
plot(WaitTime)
?objects not found
?corr
?correlation
?correl
fit1<-lm(CustSat~WaitTime, data=data1)
summary(fit1)
plot(CustSat,WaitTime)
plot(CustSat,WaitTime, data=data1)
data1
objects()
attach(data1)
plot(CustSat)
plot(CustSat,WaitTime)
fit1<-(CustSat~WaitTime)
summary(fit1)
anova(fit1)
fit1<-lm(CustSat,WaitTime)
fit1<-lm(CustSat~WaitTime)
summary(fit1)
anova(fit1)
fit1<-lm(CustSat~WaitTime+Time)
summary(fit1)
?correlation
cor(CustSat,WaitTime)
?cor
cor(WaitTime,Time)
cor(Time,WaitTime)
plot(fit1)
plot(WaitTime,Time)
?mean
qqnorm(fit1)
list
fit1
qqplot(fit1)
?qqplot
qqplot(CustSat,WaitTime)
?abline
fit1<-lm(CustSat~WaitTime)
summary(fit1)
cor(fit1)
cor(CustSat,WaitTime)
fit2<-lm(CustSat~WaitTime+Time)
summary(fit2)
?plot
anova(fit1)
anova(fit2)
install.packages("qcc")
install.packages("KernSmooth")
library(KernSmooth)
MD
## This is a markdown document
---
title: "HelloWorld"
author: "squirij"
date: "March 9, 2015"
output: html_document
---
## This is a markdown document.
install.packages(qcc)
library("qcc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
## This is a markdown file
install.packages("RMySQL")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5845fda7c3138a92d5c3",
secret = "ce3d60a1de86fcba4575c03dce412172d80ffa66")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
?sqldf
write.packages("sqldf")
write.package("sqldf")
load.package("sqldf")
get.package("sqldf")
install.package("sqldf")
install.packages("sqldf")
library(sqldf)
?sqldf
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
con
nchar(1)
nchar(10)
library(XML)
con <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
con
nchar(10)
htmlcode <- readlines(con)
htmlcode <- readLines(con)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
htmlCode(10)
htmlCode
htmlCode(10)
nchar(10)
nchar(htmlCode(10))
nchar(htmlcode(10))
htmlcode <- readLines(con)
htmlcode
nchar(htmlcode(10))
nchar(htmlcode(10), type = "chars", allowNA = FALSE)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
head(x)
sum(v4)
sum(x$v4)
sum(x$v4)
sum(,4)
?sum
x <- data.frame(x)
sum(x$v4)
x <- data.frame(x, na.rm=TRUE)
sum(x$v4)
colsums(x)
colSums(x)
?colsums
x
colSums(,4)
x
sum(x$v4)
names(x)
colSums(v4)
colSum(,4)
y <- x$v4
y
y <- x(,4)
x
x
sum(x$vr)
sum(x$v4, na.rm=TRUE)
x
sum(,5)
sum(x$"v4")
head(x)
dim x
dim(x)
colSums("v4")
colSums(1,5)
colSums(,5)
x
colSums("v4")
colSums(Filter(is.numeric, x))
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
colSums(Filter(is.numeric, x))
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
colSums(Filter(is.numeric, x))
colSums(Filter(is.numeric,x),na.rm=TRUE)
colSums(Filter(is.numeric, x))
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(
+     file=geturl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
+     skip=4,
+     widths=c(12, 7,4, 9,4, 9,4, 9,4))
library(curl)
install.package("curl")
install.packages("curl")
library(curl)
x <- read.fwf(
curl("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
colSums(Filter(is.numeric,x))
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readLines(con)
close(con)
htmlcode
nchar(htmlcode)
require(dplyr)
plot1 <- function() {
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
dat <- NEI                                      %>%
filter(Pollutant == "PM25-PRI",
year %in% c(1999, 2002, 2005, 2008)) %>%
group_by(year)                              %>%
summarise(total = n())
png(file = "plot1.png", width = 480, height = 480)
with(dat, barplot(total, names.arg = year, xlab = "Year", ylab = "Total",
main = "Total PM2.5 Emissions By Year"))
dev.off()
}
plot1
with(dat, barplot(total, names.arg = year, xlab = "Year", ylab = "Total",
main = "Total PM2.5 Emissions By Year"))
install.packages("knitr")
install.packages("markdown")
library(knitr)
library(markdown)
head(steps)
steps <-read.csv("activity.csv")
setwd("~/Desktop/RepData_PeerAssessment1")
steps <- read.csv("activity.csv")
summary(steps)
head(steps)
?table
?weekends
?weekdays
weekdays(steps)
wkdays <-weekdays(date)
wkdays <-(date, abbreviate=TRUR)
str(steps)
date <- class(POSIXt)
date <- as.POSIXt(date)
summary(steps)
str(steps)
?POSIXt
date2 <-as.POSIXlt(date)
?aggregate
d <- aggregate(steps, by=date, FUN=sum)
summary(steps)
d<-aggregate(steps~date, data=steps, sum)
d
histogram(d.steps)
?histogram
hist(AirPassengers,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
hist(d.steps, )
hist(steps)
str(d)
hist(steps)
hist(d.steps)
hist(d$steps)
d
?hist
summary(d)
m <-mean(d$steps)
m
n <- median(d$steps)
n
m<-round(m)
m
q<-aggregate(steps~interval, data=steps, mean)
q
plot(q$interval, q$steps)
plot(q$interval, q$steps, type="l")
?plot
m <-max(q$steps)
m
m <-max(q$steps,q$interval)
m
m <-max(q$steps)
n<-q$interval(q$steps==max(q$steps))
t <- q[qRsteps==max(q$steps),]
t <- q[q$steps==max(q$steps),]
t
t <- q[q$steps==max(q$steps),]
m<- t$interval
o <- t$steps
o <- as.integer(o)
m
o
summary(steps)
x <-steps$date
x
str(steps)
str(steps)
steps
head(steps,n=3000)
str(steps)
stepsna<-subset(steps,steps$steps=="NA")
stepsna<-as.character(steps$steps)
stepsna
steps2<-cbind(steps,stepsna)
steps2
summary(steps)
summary(stepsna)
stepsna<-subset(steps,steps$steps=="NA")
stepsna<-subset(steps,steps$stepsna=="NA")
stepsna<-subset(steps,steps$stepsna=="<N/A>")
steps
steps
steps <- read.csv("activity.csv")
summary(steps)
q<-aggregate(steps~interval, data=steps, mean)
summary(q)
head(q)
?completed cases
steps[steps=='NA'] <- NA
NA
steps
head(steps, n=10)
x<-steps[steps$steps==NA]
x<-steps[(steps$steps==NA),]
x
str(x)
new_DF <- steps[(is.na(steps$steps),]
new_DF <- steps[(is.na(steps$steps)]
?read.csv
x<-na.omit(steps)
str(x)
head(x,n=100)
y <- na.exclude(steps)
str(y)
y <- na.keep(steps)
?na
y <- steps[complete.cases(steps),]
str(y)
str(s)
str(x)
y <- is.na(steps)
y
y <- steps[(steps,is.na(steps),]
y <- steps[(steps,is.na(steps)]
y <- steps[!complete.cases(steps),]
y
str(y)
str(x)
head(y, n=200)
q<-aggregate(steps~interval, data=steps, mean)
head(q,n=200)
x <- na.omit(steps)
#get dataset with NAs only
y <- steps[!complete.cases(steps),]
#merge the aggregate dataset above average steps by day by interval
#and merge it with y above to impute the steps
merge(y, q, by.x=c("Interval"),
by.y=c("Interval"),
all.x=TRUE)
str(y)
str(q)
z <- merge(y, q, by="Interval")
?merge
z <- merge(y, q, by.x="Interval", by.y="Interval", all=TRUE)
z <- merge(y, q, by.x="interval", by.y="interval", all=TRUE)
z
str(z)
x <- na.omit(steps)
steps.y <- as.numeric(x$steps)
stepsbind <- cbind(x,steps.y)
str(stepsbind)
str(z)
?sort
?order
q
zz <- z[c('steps', "date", "interval", "steps.y")]
str(z)
str(stepsbind)
zz <- z[c(2,3,1,4)]
str(zz)
x <- na.omit(steps)
steps.y <- as.numeric(x$steps)
stepsbind <- cbind(x,steps.y)
#get dataset with NAs only
y <- steps[!complete.cases(steps),]
#merge the aggregate dataset above average steps by day by interval-q
#and merge it with y above to impute the steps
z <- merge(y, q, by.x="interval", by.y="interval", all=TRUE)
zz <- z[c(2,3,1,4)]
#combine and sort the nas with non-nas
stepsfin <- rbind(stepsbind,zz)
str(stepsbind)
str(zz)
?names
colnames(zz)<- c("steps", "date", "interval", "steps.y")
zz
str(stepsbind)
stepsfin <- rbind(stepsbind,zz)
summary(stepsfin)
str(stepsfin)
stepsfin <- stepsfin[with(stepsfin, order(date, interval)), ]
head(stepsfin, n=300)
tail(stepsfin, n=1000)
stepsfin <- stepsfin[with(stepsfin, order(date, integer)), ]
stepsfin <- stepsfin[with(stepsfin, order("date"", "integer"")), ]
stepsfin <- stepsfin[with(stepsfin, order("date", "integer")), ]
head(stepsfin)
head(stepsfin,n=100)
str(stepsfin)
stepsfin <- rbind(stepsbind,zz)
head(stepsfin, n=100)
stepsfin <- stepsfin[order(stepsfin[,2], stepsfin[,3]), ]
head(stepsfin, n=200)
str(stepsfin)
stepsfin$date <- as.Date(strptime(stepsfin$date, format="%Y-%m-%d"))
# convert date to a date() class variable
stepsfin$day <- weekdays(stepsfin$date)
# build a 'day' factor to hold weekday / weekend
for (i in 1:nrow(stepsfin)) {
# for each day
if (stepsfin[i,]$day %in% c("Saturday","Sunday")) {
# if Saturday or Sunday,
stepsfin[i,]$day<-"weekend"                                 #   then 'weekend'
}
else{
stepsfin[i,]$day<-"weekday"                                 #    else 'weekday'
}
}
str(stepsfin)
head(stepsfin, n=1000)
b <- aggregate(stepsfin$steps.y ~ stepsfin$interval + stepsfin$day, stepfin, mean)
b <- aggregate(stepsfin$steps.y ~ stepsfin$interval + stepsfin$day, stepsfin, mean)
b
names(b) <- c("interval", "day", "steps")
b.steps <- as.integer(b.steps)
b
stepsb <- as.integer(b.steps)
b$steps <- as.integer(b$steps)
b
plot(b$interval, b$steps(b$day=="weekday",xlab="5 minute Interval",
ylab="Mean")
plot(b$interval, b$steps(b$day=="weekday")
,xlab="5 minute Interval",
ylab="Mean")
plot(b$interval, b$steps(b$day=="weekday")
,xlab="5 minute Interval",
ylab="Mean")
?plot
b
?title
par(mfrow=c(2,1))
title(main="Average Number of Steps", xlab="5 min Intervals", ylab="Number of Steps")
with(b[b$day=="weekday",], plot(b$interval, b$steps, type='l', main="Average Across all Weekdays"))
with(b[b$day=="weekend",], plot(b$interval, b$steps, type='l', main="Average Number of Steps Taken across all Weekends"))
par(mfrow=c(2,1))
title(main="Average Number of Steps", xlab="5 min Intervals", ylab="Number of Steps")
with(b[b$day=="weekday"], plot(b$interval, b$steps, type='l', main="Average Across all Weekdays"))
with(b[b$day=="weekend"], plot(b$interval, b$steps, type='l', main="Average Across all Weekends"))
par(mfrow=c(2,1))
title(main="Average Number of Steps", xlab="5 min Intervals", ylab="Number of Steps")
with(b[b$day=="weekday",], plot(b$interval, b$steps, type='l', main="Average Across all Weekdays"))
with(b[b$day=="weekend",], plot(b$interval, b$steps, type='l', main="Average Across all Weekends"))
b
str(b)
ggplot(b, aes(interval,steps))+geom_point(color="chartreuse4")+
facet_wrap(~day, ncol=1, nrow=2)
ggplot2(b, aes(interval,steps))+geom_point(color="chartreuse4")+
facet_wrap(~day, ncol=1, nrow=2)
?ggplot
g <- ggplot(b, aes(x=factor(day), y=temis))
g+geom_bar(stat="identity", fill="steelblue",color="steelblue")+facet_grid(day~.)+labs(title = "Total PM 2.5 Emissions for Baltimore City by Type") + labs(x = "Year", y = "Total Emission (tons)")
library(ggplot2)
g <- ggplot(b, aes(x=factor(day), y=temis))
g+geom_bar(stat="identity", fill="steelblue",color="steelblue")+facet_grid(day~.)+labs(title = "Total PM 2.5 Emissions for Baltimore City by Type") + labs(x = "Year", y = "Total Emission (tons)")
g <- ggplot(b, aes(x=factor(day), y=steps))
g+geom_bar(stat="identity", fill="steelblue",color="steelblue")+facet_grid(day~.)+labs(title = "Total PM 2.5 Emissions for Baltimore City by Type") + labs(x = "Year", y = "Total Emission (tons)")
?geom_line
g <- ggplot(b, aes(x=factor(day), y=steps))
g+geom_line(color="steelblue")+facet_grid(day~.)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Ttoal Says")
?aes
g <- ggplot(b, aes(x=factor(interval), y=steps))
g+geom_line(color="steelblue")+facet_grid(day~.)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Ttoal Says")
g <- ggplot(b, aes(x=interval, y=steps))
g+geom_line(color="steelblue")+facet_grid(day~.)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Ttoal Says")
?facet_grid
g <- ggplot(b, aes(x=interval, y=steps))
g+geom_line(color="steelblue")+facet_grid(day~., labeller=label_both)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Ttoal Says")
g <- ggplot(b, aes(x=interval, y=steps))
g+geom_line(color="steelblue")+facet_grid(day~., labeller=label_value)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Average Steps Taken")
b
str(b)
?labeller
g <- ggplot(b, aes(x=interval, y=steps))
g+geom_line(color="steelblue")+facet_grid(day~., labeller=label_both(day,value)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Average Steps Taken")
g <- ggplot(b, aes(x=interval, y=steps))
g+geom_line(color="steelblue")+facet_grid(day~., labeller=label_parsed)+labs(title = "Average Steps Taken by Weekday or Weekend by Interval") + labs(x = "5 minute interval", y = "Average Steps Taken")
?knitr
